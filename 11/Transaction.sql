--TRANSACTIOS
/*

    Transactions are used to protect data integrity by ensuring that all data changes within a transaction succeed or fail as a unit.
    Individual Transact-SQL statements are inherently treated as transactions, and you can define explicit transactions that encompass mulitple statements.
    Use the BEGIN TRANSACTION, COMMIT TRANSACTION, and ROLLBACK TRANSACTION statements to manage transactions.
    Enable the XACT_ABORT option to automatically rollback all transactions if an exception occurs.
    Use the @@TRANCOUNT system variable and XACT_STATE system function to determine transaction status.

	https://technet.microsoft.com/en-us/library/2009.02.logging.aspx

*/

BEGIN TRY
	INSERT INTO SALESLT.SALESORDERHEADER (DUEDATE, CUSTOMERID, SHIPMETHOD)
	VALUES 
	(DATEADD(dd,7,getdate()),1,'STD DELIVERY')

	DECLARE @SALESORDERID INT  = SCOPE_IDENTITY();

	INSERT INTO  SALESLT.SALESORDERDETAIL (SALESORDERID, ORDERQTY,PRODUCTID,UNITPRICE,UNITPRICEDISCOUNT)
	VALUES
	(@SALESORDERID,1,99999,1431.50,0.0)
END TRY
BEGIN CATCH
	PRINT ERROR_MESSAGE();
END CATCH

SELECT H.SALESORDERID, H.DUEDATE, H.CUSTOMERID,H.SHIPMETHOD,D.SALESORDERDETAILID
FROM SALESLT.SALESORDERHEADER AS H
LEFT JOIN SALESLT.SALESORDERDETAIL AS D
ON D.SALESORDERID=H.SALESORDERID
WHERE D.SALESORDERID IS NULL

DELETE FROM SALESLT.SALESORDERHEADER
WHERE SALESORDERID=SCOPE_IDENTITY();


BEGIN TRY
	BEGIN TRANSACTION
		INSERT INTO SALESLT.SALESORDERHEADER (DUEDATE, CUSTOMERID, SHIPMETHOD)
		VALUES 
		(DATEADD(dd,7,getdate()),1,'STD DELIVERY')

		DECLARE @SALESORDERID INT  = SCOPE_IDENTITY();

		INSERT INTO  SALESLT.SALESORDERDETAIL (SALESORDERID, ORDERQTY,PRODUCTID,UNITPRICE,UNITPRICEDISCOUNT)
		VALUES
		(@SALESORDERID,1,99999,1431.50,0.0)
	COMMIT TRANSACTION
END TRY
BEGIN CATCH
	IF @@TRANCOUNT >0
	BEGIN
		PRINT XACT_STATE();
		ROLLBACK TRANSACTION;
		END
	PRINT ERROR_MESSAGE();
	THROW 50001, 'FAILED TRANS',0
END CATCH

SET XACT_ABORT ON;
BEGIN TRY
	BEGIN TRANSACTION
		INSERT INTO SALESLT.SALESORDERHEADER (DUEDATE, CUSTOMERID, SHIPMETHOD)
		VALUES 
		(DATEADD(dd,7,getdate()),1,'STD DELIVERY')

		DECLARE @SALESORDERID INT  = SCOPE_IDENTITY();

		INSERT INTO  SALESLT.SALESORDERDETAIL (SALESORDERID, ORDERQTY,PRODUCTID,UNITPRICE,UNITPRICEDISCOUNT)
		VALUES
		(@SALESORDERID,1,99999,1431.50,0.0)
	COMMIT TRANSACTION
END TRY
BEGIN CATCH
	IF @@TRANCOUNT >0
	BEGIN
		PRINT XACT_STATE();
		END
	PRINT ERROR_MESSAGE();
	THROW 50001, 'FAILED TRANS',0
END CATCH
SET XACT_ABORT OFF;



